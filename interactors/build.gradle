
plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id "fr.coppernic.versioning" version "3.1.2"
}

apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


task checkstyle(type: Checkstyle) {
    configFile rootProject.file('config/checkstyle.xml')
    source 'src/main/java'
    ignoreFailures false
    showViolations true
    include '**/*.java'

    classpath = files()
}

afterEvaluate {
    if (project.tasks.findByName('check')) {
        check.dependsOn('checkstyle')
    }
}

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 29
        versionCode versioning.info.versionCode
        versionName versioning.info.display

        // Special build type for testing
        testBuildType "staging"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            ext.alwaysUpdateBuildId = false
        }
        // Barista and espresso needs minSdkVersion > 18, we create a special builtType for androidTest
        staging {
            initWith(buildTypes.debug) // keep versionName and PIN from 'debug'
            defaultConfig.minSdkVersion 19
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
        exclude 'META-INF/lib_release.kotlin_module'
    }
}

dependencies {

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Jet pack
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'

    // Logging
    implementation "org.slf4j:slf4j-api:1.7.25"

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.10'

    // Coppernic
    implementation 'fr.coppernic.sdk.cpcutils:CpcUtilsLib:6.19.0'
    implementation 'fr.coppernic.sdk.core:CpcCore:1.9.0'

    // Dagger
    //noinspection GradleDependency
    compileOnly 'com.google.dagger:dagger:2.16'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    //noinspection GradleDependency
    testImplementation 'org.awaitility:awaitility:3.0.0'
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'org.amshove.kluent:kluent:1.56'
    testImplementation 'androidx.test:core:1.2.0'

    // Timber
    testImplementation ('com.jakewharton.timber:timber:4.7.1') {
        exclude group:'org.jetbrains'
    }
    testImplementation 'fr.bipi.treessence:treessence:0.3.0'
    testImplementation 'com.arcao:slf4j-timber:3.1'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'org.amshove.kluent:kluent-android:1.49'

    // Logs
    androidTestImplementation 'com.arcao:slf4j-timber:3.1'
    androidTestImplementation ('com.jakewharton.timber:timber:4.7.1') {
        exclude group: 'org.jetbrains'
    }
    androidTestImplementation 'fr.bipi.treessence:treessence:0.3.0'
    //noinspection GradleDependency
    androidTestImplementation 'org.awaitility:awaitility:3.0.0'
    androidTestImplementation('com.schibsted.spain:barista:3.2.0') {
        exclude group: 'com.android.support'
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }

}

apply from: rootProject.file('gradle/gradle-publish.gradle')
